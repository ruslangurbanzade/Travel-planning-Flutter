// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.travel_planning;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pidgeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Flight {
    private @Nullable String number;
    public @Nullable String getNumber() { return number; }
    public void setNumber(@Nullable String setterArg) {
      this.number = setterArg;
    }

    private @Nullable String origin;
    public @Nullable String getOrigin() { return origin; }
    public void setOrigin(@Nullable String setterArg) {
      this.origin = setterArg;
    }

    private @Nullable String destination;
    public @Nullable String getDestination() { return destination; }
    public void setDestination(@Nullable String setterArg) {
      this.destination = setterArg;
    }

    private @Nullable Long duration;
    public @Nullable Long getDuration() { return duration; }
    public void setDuration(@Nullable Long setterArg) {
      this.duration = setterArg;
    }

    private @Nullable String price;
    public @Nullable String getPrice() { return price; }
    public void setPrice(@Nullable String setterArg) {
      this.price = setterArg;
    }

    public static final class Builder {
      private @Nullable String number;
      public @NonNull Builder setNumber(@Nullable String setterArg) {
        this.number = setterArg;
        return this;
      }
      private @Nullable String origin;
      public @NonNull Builder setOrigin(@Nullable String setterArg) {
        this.origin = setterArg;
        return this;
      }
      private @Nullable String destination;
      public @NonNull Builder setDestination(@Nullable String setterArg) {
        this.destination = setterArg;
        return this;
      }
      private @Nullable Long duration;
      public @NonNull Builder setDuration(@Nullable Long setterArg) {
        this.duration = setterArg;
        return this;
      }
      private @Nullable String price;
      public @NonNull Builder setPrice(@Nullable String setterArg) {
        this.price = setterArg;
        return this;
      }
      public @NonNull Flight build() {
        Flight pigeonReturn = new Flight();
        pigeonReturn.setNumber(number);
        pigeonReturn.setOrigin(origin);
        pigeonReturn.setDestination(destination);
        pigeonReturn.setDuration(duration);
        pigeonReturn.setPrice(price);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("number", number);
      toMapResult.put("origin", origin);
      toMapResult.put("destination", destination);
      toMapResult.put("duration", duration);
      toMapResult.put("price", price);
      return toMapResult;
    }
    static @NonNull Flight fromMap(@NonNull Map<String, Object> map) {
      Flight pigeonResult = new Flight();
      Object number = map.get("number");
      pigeonResult.setNumber((String)number);
      Object origin = map.get("origin");
      pigeonResult.setOrigin((String)origin);
      Object destination = map.get("destination");
      pigeonResult.setDestination((String)destination);
      Object duration = map.get("duration");
      pigeonResult.setDuration((duration == null) ? null : ((duration instanceof Integer) ? (Integer)duration : (Long)duration));
      Object price = map.get("price");
      pigeonResult.setPrice((String)price);
      return pigeonResult;
    }
  }
  private static class FlightApiCodec extends StandardMessageCodec {
    public static final FlightApiCodec INSTANCE = new FlightApiCodec();
    private FlightApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Flight.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Flight) {
        stream.write(128);
        writeValue(stream, ((Flight) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface FlightApi {
    @NonNull List<Flight> fetchAll();
    void select(@NonNull String number);
    @Nullable String fetchSelected();

    /** The codec used by FlightApi. */
    static MessageCodec<Object> getCodec() {
      return FlightApiCodec.INSTANCE;
    }

    /** Sets up an instance of `FlightApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, FlightApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlightApi.fetchAll", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<Flight> output = api.fetchAll();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlightApi.select", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String numberArg = (String)args.get(0);
              if (numberArg == null) {
                throw new NullPointerException("numberArg unexpectedly null.");
              }
              api.select(numberArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.FlightApi.fetchSelected", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.fetchSelected();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
